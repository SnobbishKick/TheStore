import React, { useContext, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';

import { MyContext } from '../Mycontext';
import axios from 'axios';
import './Cart.css';

function Cart() {
  const [cartTotal, setCartTotal] = useState(0);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const { addToCart, cartItems, setCartItems,totalAmount, storedUserEmail,userToken,
    //  FetchUsersCart, 
     products, serverURL } = useContext(MyContext);
console.log("storedUserEmail",storedUserEmail)

  const navigate = useNavigate();
  // const userEmail = localStorage.getItem("email");
  // const userToken = localStorage.getItem("userToken");

  // async function fetchCart() {
  //   if (!userToken) {
  //     alert("Please Login First");
  //     return;
  //   }

  //   setLoading(true);
  //   setError(null);

  //   try {
  //     const response = await axios.post("http://localhost:4000/api/user/getCart", {
  //       storedUserEmail: storedUserEmail,
  //     });
  //     const data = response.data || [];
  //     setCartItems(Array.isArray(data) ? data : []);
  //     console.log("Cart items fetched successfully:", data);
  //   } catch (error) {
  //     if (error.response) {
  //       console.error('Error response:', error.response);
  //       alert(`Error: ${error.response.status} - ${JSON.stringify(error.response.data)}`);
  //     } else {
  //       console.error('Error:', error.message);
  //       alert("An error occurred while fetching the cart.");
  //     }
  //     setError("Failed to fetch cart items");
  //   } finally {
  //     setLoading(false);
  //   }
  // }

  // useEffect(() => {
  //   fetchCart();
  // }, []);

  const FetchUsersCart = async () => {
    console.log("storedUserEmail @ cart",storedUserEmail);
    try {
      if (!storedUserEmail) {
        console.error('Missing storedUserEmail');
        return; // Handle the case where email is missing
      }
      if (!userToken) {
        alert("Please login to view cart");
        return;
      }
      const cartResponse = await axios.post(`${serverURL}/api/users/getcart`, {
        storedUserEmail: storedUserEmail 
      });
      console.log("cartResponse",cartResponse);

      const data = cartResponse.data || [];
      console.log("cartResponse.data",data);
      setCartItems(data)
      // setCartItems(Array.isArray(data) ? data : []);
      console.log("Cart items fetched successfully:", data);
      console.log("cartitems",cartItems);
    } catch (error) {
      if (error.cartResponse) {
        console.error('Error response:', error.cartResponse);
        alert(`Error: ${error.cartResponse.status} - ${JSON.stringify(error.cartResponse.data)}`);
      } else {
        console.error('Error:', error.message);
        alert("An error occurred while fetching the cart.");
      }
      setError("Failed to fetch cart items");
    } finally {
      setLoading(false);
    }
  };
console.log("cartitems",cartItems);
  useEffect(() => {
    FetchUsersCart();
  }, []);


  useEffect(() => {
    const calculateCartTotal = () => {
      return cartItems.reduce((total, item) => {
        const quantity = item.quantity || 1;
        const price = item.price || 0;
        return total + price * quantity;
      }, 0);
    };
    setCartTotal(calculateCartTotal());
  }, [cartItems]);

  const handleQuantityChange = async (productId, newQuantity) => {
    console.log("newquantity",newQuantity,productId)
    if (newQuantity < 1) return;
    console.log("newquantity inside if(){}",newQuantity,productId)

    const updatedCart = cartItems.map(item =>
      item.product_id === productId ? { ...item, quantity: newQuantity } : item
    );

    setCartItems(updatedCart);

    try {
      console.log("newquantity inside try{}",newQuantity,productId)

      await axios.put(`${serverURL}/api/users/updatequantity`, {
        storedUserEmail: storedUserEmail,
        productId: productId,
        newQuantity: newQuantity,
      });
      console.log("Cart quantity updated successfully");
    } catch (error) {
      console.error("Failed to update cart quantity", error);
      alert("Failed to update cart quantity");
    }
  };

  const handleRemove = async (productId) => {
    try {
      const response = await axios.delete(`${serverURL}/api/users/removeCart`, {
        data: { productId: productId, storedUserEmail: storedUserEmail }
      });

      const data = response.data.cart || [];
      setCartItems(Array.isArray(data) ? data : []);
      alert("Your Product has been Removed from Cart...");
    } catch (error) {
      console.error("Failed to remove item from cart", error);
      alert("Failed to remove item from cart");
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>{error}</div>;
  }

  return (
    <div className="cart-container">
      <h1>Your Bag Items</h1>
      <div className="cart-items">
        {cartItems.length > 0 ? cartItems.map((product) => (
          <div key={product.product_id} className="cart-item">
            <img className="cart-item-image" src={product.image} alt={product.name} />
            <div className="description">
              <p className="product-name">{product.name || "No name available"}</p>
              <p>Price: ₹{product.price}</p>
              <div className="count-handler">
                <button onClick={() => handleQuantityChange(product.product_id, Math.max(1, (product.quantity || 1) - 1))}>-</button>
                <span>{product.quantity || 1}</span>
                <button onClick={() => handleQuantityChange(product.product_id, (product.quantity || 1) + 1)}>+</button>
                <h4 className="product-total">Product Total: ₹{(product.price || 0) * (product.quantity || 1)}/-</h4>
                <button className="remove" onClick={() => handleRemove(product.product_id)}>Remove</button>
              </div>
            </div>
          </div>
        )) : <h1>Your Shopping Bag is Empty</h1>}
      </div>

      {cartItems.length > 0 && (
        <div className="checkout">
          <p>Total: ₹{cartTotal}</p>
          <div className="checkout-buttons">
            <button onClick={() => navigate("/UserHome")}>Continue Shopping</button>
            <button onClick={() => navigate("/Payment")}>Checkout</button>
          </div>
        </div>
      )}
    </div>
  );
};
//   const { addToCart, cartItems, setCartItems,totalAmount, storedUserEmail, FetchUsersCart, products, serverURL } = useContext(MyContext);

//   const [cartTotal, setCartTotal] = useState(0);

//   useEffect(() => {
//     FetchUsersCart()
//   }, []);

//   const handleQuantityChange = async (item, newQuantity) => {
//     if (cartItems.length===0) {
//       // Handle empty cart scenario (e.g., display message)
//       alert("cart is empty")
//       return;
//     }
//     console.log("productId",item);
//     // ... rest of the code for sending the update request
//     try {
//       const response = await axios.put(`${serverURL}/api/users/updatequantity`, { productId:item.product_id, quantity: newQuantity,storedUserEmail });
//       setCartItems(response.data); // Update cart state with response data
//       console.log("response from quantity", response);

//       // Calculate and update cart total within this function
//       setCartTotal(cartItems.reduce((total, item) => {
//         const quantity = item.quantity || 1;
//         const price = item.price || 0;
//         return total + price * quantity;
//       }, 0));
//     } catch (error) {
//       console.error(error);
//     }
//   };

//   const handleRemove = async (productId) => {
//     try {
//       await axios.delete('http://localhost:4000/api/user/removeCart', { data: { productId, storedUserEmail } });
  
//       // Optimistic update
//       setCartItems(cartItems.filter(item => item._id !== productId));
//       alert("Your Product has been Removed from Cart...");
//     } catch (error) {
//       console.error("Failed to remove item from cart", error);
//       alert("Failed to remove item from cart");
//     }
//   };
//   console.log("cartItems & total in Cart.jsx", cartItems, totalAmount);


//   // const handleRemove = async (productId) => {
//   //   const response = await axios.delete(`${serverURL}/api/users/removecart`,{productId,storedUserEmail});
//   //   console.log("response after removing item from cart",response.data);
//   //   setCartItems(response.data);
//   // };
//   // console.log("CartItems",cartItems)

//   // const removeFromCart = async (productId) => {
//   //   try {
//   //     const response = await axios.delete(`http://localhost:5000/user/cart`, {
//   //       data: { productId },
//   //       withCredentials: true,
//   //     });
//   //     const cartItems = JSON.parse(localStorage.getItem("cartItems")) || [];
//   //     const updatedProducts = products.map(product =>
//   //       product._id === productId ? { ...product, inCart: false } : product
//   //     );
//   //     setProducts(updatedProducts);
//   //     const updatedCartItems = cartItems.filter(item => item !== productId);
//   //     localStorage.setItem("cartItems", JSON.stringify(updatedCartItems));
//   //     alert("Product removed from cart successfully");
//   //   } catch (err) {
//   //     console.error("Error removing product from cart:", err);
//   //     alert("Failed to remove product from cart");
//   //   }
//   // };


//   // FetchUsersCart()
//   return (
//     <div className='cart-mapping'>
//       <div>
//         {cartItems.map((item) => (
//           <div key={item.product_id} className="cart-item">
//             <img src={item.image} alt="" className='cartimage' />
//             <span><b>Name:{item.name}</b></span>
//             <span><b>Brand:{item.brand}</b></span>
//             <span><b>Price:{item.price}</b></span>

//             <div className='billContainer'>
//               <h3 className='ProductTotal'> Quantity:</h3>
//               <button className='minusBtn' onClick={() => handleQuantityChange(item.product_id, Math.max(1, (item.quantity) - 1))}>-</button>
//               <button>{item.quantity || 1}</button>
//               {/* <span>{item.quantity  || 1}</span> */}
//               <button className='plusBtn' onClick={() => handleQuantityChange(item.product_id, Math.max(item.quantity) + 1)}>+</button>
//             </div>
//             <button className='Remove' onClick={() => handleRemove(item.product_id)}>Remove</button>
//             <div>
//             <h4 className='ProductTotal' Total>Product Total: ₹{(item.price || 0) * (item.quantity || 1)}/-</h4>
//             </div>
//           </div>
//         ))}
//       </div>
//       <div>
//         Total: ₹{totalAmount}/-
//       </div>
//     </div>
//   );
// }

export default Cart;



// import React, { useContext, useEffect, useState } from "react";
// import axios from "axios";
// import { useNavigate } from "react-router-dom";
// import "./Cart.css";
// import { MyContext } from "../Mycontext";

// export const Cart = () => {
  // const { cartItems, setCartItems } = useContext(myContext);
//   const [cartTotal, setCartTotal] = useState(0);
//   const [loading, setLoading] = useState(false);
//   const [error, setError] = useState(null);

//   const { addToCart, cartItems, setCartItems,totalAmount, storedUserEmail, FetchUsersCart, products, serverURL } = useContext(MyContext);


//   const navigate = useNavigate();
//   const userEmail = localStorage.getItem("email");
//   const userToken = localStorage.getItem("userToken");

//   async function fetchCart() {
//     if (!userToken) {
//       alert("Please Login First");
//       return;
//     }

//     setLoading(true);
//     setError(null);

//     try {
//       const response = await axios.post("http://localhost:4000/api/user/getCart", {
//         userEmail: userEmail,
//       });
//       const data = response.data || [];
//       setCartItems(Array.isArray(data) ? data : []);
//       console.log("Cart items fetched successfully:", data);
//     } catch (error) {
//       if (error.response) {
//         console.error('Error response:', error.response);
//         alert(`Error: ${error.response.status} - ${JSON.stringify(error.response.data)}`);
//       } else {
//         console.error('Error:', error.message);
//         alert("An error occurred while fetching the cart.");
//       }
//       setError("Failed to fetch cart items");
//     } finally {
//       setLoading(false);
//     }
//   }

//   useEffect(() => {
//     fetchCart();
//   }, []);

//   useEffect(() => {
//     const calculateCartTotal = () => {
//       return cartItems.reduce((total, item) => {
//         const quantity = item.quantity || 1;
//         const price = item.price || 0;
//         return total + price * quantity;
//       }, 0);
//     };
//     setCartTotal(calculateCartTotal());
//   }, [cartItems]);

//   const handleQuantityChange = async (productId, newQuantity) => {
//     if (newQuantity < 1) return;

//     const updatedCart = cartItems.map(item =>
//       item.product_id === productId ? { ...item, quantity: newQuantity } : item
//     );

//     setCartItems(updatedCart);

//     try {
//       await axios.put("http://localhost:4000/api/user/updateCartQuantity", {
//         userEmail: userEmail,
//         productId: productId,
//         quantity: newQuantity,
//       });
//       console.log("Cart quantity updated successfully");
//     } catch (error) {
//       console.error("Failed to update cart quantity", error);
//       alert("Failed to update cart quantity");
//     }
//   };

//   const handleRemove = async (productId) => {
//     try {
//       const response = await axios.delete('http://localhost:4000/api/user/removeCart', {
//         data: { productId: productId, userEmail: userEmail }
//       });

//       const data = response.data.cart || [];
//       setCartItems(Array.isArray(data) ? data : []);
//       alert("Your Product has been Removed from Cart...");
//     } catch (error) {
//       console.error("Failed to remove item from cart", error);
//       alert("Failed to remove item from cart");
//     }
//   };

//   if (loading) {
//     return <div>Loading...</div>;
//   }

//   if (error) {
//     return <div>{error}</div>;
//   }

//   return (
//     <div className="cart-container">
//       <h1>Your Bag Items</h1>
//       <div className="cart-items">
//         {cartItems.length > 0 ? cartItems.map((product) => (
//           <div key={product.product_id} className="cart-item">
//             <img className="cart-item-image" src={product.image} alt={product.name} />
//             <div className="description">
//               <p className="product-name">{product.name || "No name available"}</p>
//               <p>Price: ₹{product.price}</p>
//               <div className="count-handler">
//                 <button onClick={() => handleQuantityChange(product.product_id, Math.max(1, (product.quantity || 1) - 1))}>-</button>
//                 <span>{product.quantity || 1}</span>
//                 <button onClick={() => handleQuantityChange(product.product_id, (product.quantity || 1) + 1)}>+</button>
//                 <h4 className="product-total">Product Total: ₹{(product.price || 0) * (product.quantity || 1)}/-</h4>
//                 <button className="remove" onClick={() => handleRemove(product.product_id)}>Remove</button>
//               </div>
//             </div>
//           </div>
//         )) : <h1>Your Shopping Bag is Empty</h1>}
//       </div>

//       {cartItems.length > 0 && (
//         <div className="checkout">
//           <p>Total: ₹{cartTotal}</p>
//           <div className="checkout-buttons">
//             <button onClick={() => navigate("/")}>Continue Shopping</button>
//             <button onClick={() => navigate("/payment")}>Checkout</button>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// };





//Admin page//



// import React, { useState, useEffect, useContext } from 'react'
// import { useNavigate } from 'react-router-dom';
// import { MyContext } from '../Mycontext';
// import axios from 'axios';
// // import Navbar from 'react-bootstrap/Navbar'
// // import 'bootstrap/dist/css/bootstrap.min.css'
// // import HeaderNavbar from '../HeaderNavbar';
// import '../admincomponents/AdminPage.css';

// function AdminPage() {


//     const { serverURL, fetchproducts, products, setProducts } = useContext(MyContext);

//     // const [products, setProducts] = useState([]);
//     // const [selectedFile, setSelectedFile] = useState(null);

//     const [newProductImg, setNewProductImg] = useState("");
//     const [newProductName, setNewProductName] = useState('');
//     const [newProductBrand, setNewProductBrand] = useState("")
//     const [newProductPrice, setNewProductPrice] = useState('');
//     const [newProductCategory, setNewProductCategory] = useState('');

//     const [editProductId, setEditProductId] = useState(null);
//     const [editProductImage, setEditProductImage] = useState("");
//     const [editProductName, setEditProductName] = useState("");
//     const [editProductBrand, setEditProductBrand] = useState("");
//     const [editProductPrice, setEditProductPrice] = useState("");
//     const [editProductCategory, setEditProductCategory] = useState('');


//     const nav = useNavigate();

//     // const serverURL = 'http://localhost:5500'


//     function userDetail() {
//         nav("/UserDetail");
//     }




//     // useEffect(() => {
//     //     fetchproducts();
//     // }, [])

//     // const fetchproducts = async () => {
//     //     try {

//     //         const response = await axios.get(`${serverURL}/api/products/getproduct`);
//     //         setProducts(response.data.productData);


//     //     } catch (error) {
//     //         console.error('error fetching products: ', error)
//     //     }
//     // };
//     // console.log("products", products);

//     const addProduct = async (event) => {
//         event.preventDefault();
//         try {
//             // handleUpload()
//             await axios.post(`${serverURL}/api/products/addproduct`, {
//                 image: newProductImg,
//                 name: newProductName,
//                 brand: newProductBrand,
//                 price: newProductPrice,
//                 category: newProductCategory
//             },

//             );
//             fetchproducts();
//             setNewProductImg('')
//             setNewProductName('');
//             setNewProductBrand("");
//             setNewProductPrice("");
//             setNewProductCategory("");
//             alert("Product has Been Added")
//         } catch (error) {
//             console.error("error adding Product:", error)
//         }
//     };


//     const updateProduct = async (event, id) => {
//         event.preventDefault();
//         try {

//             await axios.put(`${serverURL}/api/products/${id}`, {
//                 image: editProductImage,
//                 name: editProductName,
//                 brand: editProductBrand,
//                 price: editProductPrice,
//                 category: editProductCategory
//             });
//             fetchproducts();
//             cancelEdit();
//         } catch (error) {
//             console.error('error updating Products:', error);
//         }
//     };

//     const startEditingProduct = (product) => {
//         console.log(editProductId, "id")
//         console.log(product._id, "pid")
//         setEditProductId(product._id);
//         setEditProductImage(product.image)
//         setEditProductName(product.name);
//         setEditProductBrand(product.brand)
//         setEditProductPrice(product.price)
//         setEditProductCategory(product.category)
//     };

//     const cancelEdit = () => {
//         setEditProductId(null)
//         setEditProductImage('')
//         setEditProductName('');
//         setEditProductBrand("");
//         setEditProductPrice('');
//         setEditProductCategory("");
//     };

//     //   const cancelDelete = () => {
//     //     setEditProductId(null)
//     //     setEditProductImage('')
//     //     setEditProductName('');
//     //     setEditProductPrice('');
//     //     setEditProductCategory("");
//     //   };

//     const deleteProduct = async (id, e) => {
//         cancelEdit();
//         try {
//             // Msg()
//             // if(e==="yes"){
//             // Msg()
//             await axios.delete(`${serverURL}/api/products/${id}`);
//             fetchproducts();
//             cancelEdit();
//             // }
//             // else{

//             // }
//         } catch (error) {
//             console.error('error deleting employee', error);
//         }

//     };

//     //   console.log(editProductId,"id")

//     return (
//         <div className="Alogo">
//             <div className="admin-product">
//                 <button className="UserDetail" onClick={userDetail}>User Details</button>
//                 <div className="container">
//                 <form onSubmit={addProduct} className="product-form">
//                     {/* <li style={{
//                             backgroundColor: "#fffdfc",
//                             listStyle: "none",
//                             display: "grid",
//                             width: "400px",
//                             height: "350px",
//                             marginLeft: "500px",
//                             paddingLeft: "10px",
//                             boxShadow: "rgba(0, 0, 0, 0.24) 0px 3px 8px"
//                         }}> */}
//                     <input type='url'
//                         // style={{ listStyle: "none", width: "380px", height: "40px" }}
//                         className="input-field"
//                         placeholder='Product Image url'
//                         // value={newProductImg}
//                         onChange={e => setNewProductImg(e.target.value)} />
//                     <br />
//                     <input type="text"
//                         className="input-field"
//                         // style={{ listStyle: "none", width: "380px", height: "40px" }}
//                         placeholder='product Name'
//                         value={newProductName}
//                         onChange={(e) => { setNewProductName(e.target.value) }}
//                     />
//                     <br />
//                     <input type='text'
//                         className="input-field"
//                         // style={{ listStyle: "none", width: "380px", height: "40px" }}
//                         placeholder='Brand'
//                         value={newProductBrand}
//                         onChange={(e) => { setNewProductBrand(e.target.value) }}
//                     />
//                     <br />

//                     <input type='number'
//                         className="input-field"
//                         // style={{ listStyle: "none", width: "380px", height: "40px" }}
//                         placeholder='Price'
//                         value={newProductPrice}
//                         onChange={(e) => { setNewProductPrice(e.target.value) }}
//                     />
//                     <br />
//                     <input type="text" placeholder='Category'
//                         className="input-field"
//                         // style={{ listStyle: "none", width: "380px", height: "40px" }}
//                         value={newProductCategory}
//                         onChange={(e) => { setNewProductCategory(e.target.value) }}
//                     />
//                     <br />
//                     <button type='submit'
//                         // style={{
//                         //     listStyle: "none", width: "300px", height: "30px",
//                         //     backgroundColor: "greenyellow",
//                         //     // borderLeft:"30px" ,
//                         //     // alignContent:"center",
//                         //     marginLeft: "45px"
//                         // }}
//                         className="add-button"
//                     >
//                         Add Product
//                     </button>
//                     {/* </li> */}
//                 </form>
//                 {/* <ul className="display" style={{ display: "flex", flexWrap: "wrap", Gap: "91px" }}> */}
//                 <div className="product-list">
//                     {
//                         products.map((product) => (
//                             <div key={product._id} className="product-item">
//                                 {/* <div className='imgp' style={{ display: "flex", flexDirection: "column", alignItems: "center", border: "1px solid black", margin: "10px", justifyContent: "space-between" }}> */}
//                                 {editProductId === product._id ? (
//                                     <form onSubmit={(e) => updateProduct(e, product._id)}>
//                                         {/* <ul>  */}
//                                         <b>image URL:</b>

//                                         <input
//                                             type='url'
//                                             className="input-field"
//                                             style={{ listStyle: "none", width: "250px", height: "30px" }}
//                                             value={editProductImage}
//                                             onChange={(e) => setEditProductImage(e.target.value)}
//                                         />

//                                         <b>Name</b>

//                                         <input
//                                             type='text'
//                                             className="input-field"
//                                             style={{ listStyle: "none", width: "250px", height: "30px" }}
//                                             value={editProductName}
//                                             onChange={(e) => setEditProductName(e.target.value)}
//                                         />

//                                         <b>Brand</b>

//                                         <input
//                                             type='text'
//                                             className="input-field"
//                                             style={{ listStyle: "none", width: "250px", height: "30px" }}
//                                             value={editProductBrand}
//                                             onChange={(e) => setEditProductBrand(e.target.value)}
//                                         />

//                                         <b>Price</b>

//                                         <input
//                                             type='number'
//                                             className="input-field"
//                                             style={{ listStyle: "none", width: "250px", height: "30px" }}
//                                             value={editProductPrice}
//                                             onChange={(e) => setEditProductPrice(e.target.value)}
//                                         />

//                                         <b>Category:</b>

//                                         <input
//                                             type='text'
//                                             className="input-field"
//                                             style={{ listStyle: "none", width: "250px", height: "30px" }}
//                                             value={editProductCategory}
//                                             onChange={(e) => setEditProductCategory(e.target.value)}
//                                         />

//                                         {/* </ul> */}
//                                         {/* <input 
//                                         type='file'
//                                         value={editProductDescription}
//                                         onChange={(e) => setEditProductDescription(e.target.value)}
//                                         /> */}

//                                         <button type='submit' className="update-button">Update</button>
//                                         <button type='button' className="cancel-button" onClick={cancelEdit}>Cancel</button>
//                                     </form>
//                                 ) : (
//                                     <>
//                                         <span className="product-name">NAME: <b>{product.name}</b></span>
//                                         <span className="product-category">CATEGORY: <b>{product.category}</b></span>
//                                         <span className="product-price">PRICE: <b>{product.price}</b></span>
//                                         <img src={product.image} alt={product.name} height={300} width={300} className="product-image" />
//                                         <button onClick={() => startEditingProduct(product)} className="edit-button">EDIT</button>
//                                         <button onClick={() => deleteProduct(product._id)} className="delete-button">DELETE</button>
//                                     </>
//                                 )}
//                             </div>
//                             // </div>
//                         ))
//                     }
//                 </div>
//                 {/* </ul> */}
//                 </div>
//             </div>
//         </div >
//     )
// }


// export default AdminPage



// HeaderNavbar


// import React, { useContext, useState } from 'react'
// import '../src/HeaderNavbar.css'
// // import Navbar from "react-bootstrap/Navbar";

// import { BsMinecart } from "react-icons/bs";
// import { GiSelfLove } from "react-icons/gi";
// import { AiOutlineUser } from "react-icons/ai";
// import { Link, useNavigate } from "react-router-dom";
// import { IoMdLogOut } from "react-icons/io";
// import { GrUserAdmin } from "react-icons/gr";
// import { AiFillControl } from "react-icons/ai";
// import { AiFillHome } from "react-icons/ai";


// import Badge from "react-bootstrap/Badge";

// import { MyContext } from './Mycontext';




// function HeaderNavbar() {

//   const { product, setProduct, setLoginStatus, storedUserEmail, userToken, searchInput, products, setSearchInput } = useContext(MyContext)

//   const nav = useNavigate()
//   const [dropdownOpen, setDropdownOpen] = useState(false);
//   // const storedUserEmail=localStorage.getItem("userEmail")

//   // console.log("storedUserEmails",storedUserEmail); 

//   console.log("serchInput - nav", searchInput);


//   const handleLogout = () => {
//     alert("User Loging out");
//     // localStorage.removeItem("userToken")
//     // localStorage.removeItem()
//     localStorage.clear();
//     setLoginStatus("logout")
//     console.log("authtoken")
//   }


//   function handleSearch(e) {
//     const query = e.target.value

//     setSearchInput(query)

//     const result = products.filter(items => {
//       const { brand, name, category } = items

//       return (

//         brand.toUpperCase().includes(query.toUpperCase()) ||
//         name.toUpperCase().includes(query.toUpperCase()) ||
//         category.toUpperCase().includes(query.toUpperCase())
//       )

//     })
//     setProduct(result)
//     // return(
//     //   brand.toLowerCase().includes(query.toLowerCase()) ||
//     //     name.toLowerCase().includes(query.toLowerCase())||
//     //     catagory.toLowerCase().includes(query.toLowerCase())
//     // )
//     // if (searchInput.toLowerCase().includes("bata")) {
//     //   return "/Bata";
//     // } else if (searchInput.toLowerCase().includes("nike")) {
//     //   return "/Nike";
//     // } else if (searchInput.toLowerCase().includes("puma")) {
//     //   return "/Puma";
//     // } else if (searchInput.toLowerCase().includes("reebok")) {
//     //   return "/Reebok";
//     // }
//     // else if (searchInput.toLowerCase().includes("hushpuppies")) {
//     //   return "/HushPuppies";
//     // }else if (searchInput.toLowerCase().includes("weinbrenner")) {
//     //   return "/Weinbrenner";
//     // }
//   }


//   function logoBtn() {
//     nav('/UserHome');
//   }

//   function LoginBtn() {
//     nav("/");
//   }

//   const cartBtn = async () => {
//     if (!userToken) {
//       alert("Please login to view your cart")
//     } else {
//       nav("/Cart");
//     }
//   }

//   function wishBtn() {
//     nav("/Wishlist")
//   }
//   // function brandBtn() {
//   //   nav("/ViewProduct");
//   // }

//   function toAdminLogin() {
//     nav("/AdminLogin")
//   }


//   const handleDropdownToggle = () => {
//     setDropdownOpen(!dropdownOpen);
//   };


//   return (
//     // <Navbar expand="lg" variant="light" bg="light">
//     <div className='nav'>
//       <div className="Header-Navbar">
//         <div className="Nav-bar">
//           <div className="left-section">
//             {/* <> */}
//             <span
//               to="/UserHome"
//               className="logo"
//               onClick={logoBtn}
//             >
//               The Store
//               {/* <AiFillHome className="Homebtn"/> */}
//             </span>
//             {/* </> */}
//             {/* <span className="logo"
//               to="/UserHome"
//               onClick={logoBtn}
//             >
//               The Store
//             </span> */}
//             {/* <div className="center-section">
              


//             </div> */}
//             {/* <i class="fa fa-search"></i> */}
//             {/* <Link
//                   to={(e) => handleSearch(e.target.value)}
//                   className="Search-btn linkWithoutDecoration"
//                 >
//                   Search
//                 </Link>  */}

//             {/* <input
//               className="input-Search"
//               type="text"
//               placeholder="Search"
//             value={searchInput}
//             onChange={(e) => setSearchInput(e.target.value)}
//             /> */}
//             {/* <Link
//               // to={(e) => handleSearch(e.target.value)}
//               className="Search-btn linkWithoutDecoration"
//             >
//               Search
//             </Link> */}
//           </div>

//           <div className="center-section">

//             {/* <input
//               className="input-Search"
//               type="text"
//               placeholder="Search"
//             value={searchInput}
//             onChange={(e) => setSearchInput(e.target.value)}
//             /> */}
//             <input type="text"
//               // value={searchInput} 
//               className="input-Search"
//               placeholder="Search here..."
//               onChange={handleSearch}
//               style={{
//                 height: "30px",
//                 width: "400px"
//               }}
//             />
//             <span className="login-logo"
//               to="/"
//               onClick={LoginBtn}
//             >
//               {/* <AiFillControl className='filtericon' /> */}
//             </span>
//             {/* <span className="logo" */}
//             {/* // onClick={logoBtn} */}
//             {/* //  to="/ViewProduct" */}
//             {/* > */}
//             {/* Walk in Style */}
//             {/* </span> */}

//             {/* <input
//               className="input-Search"
//               type="text"
//               placeholder="Search"
//             value={searchInput}
//             onChange={(e) => setSearchInput(e.target.value)}
//             />
//             <Link
//               onClick={(e) => handleSearch(e)}
//               className="Search-btn linkWithoutDecoration"
//             >
//               Search
//             </Link> */}



//           </div>

//           <div className="right-section">
//             {!userToken ? (
//               <span className="login-logo"
//                 to="/"
//                 onClick={LoginBtn}
//               >
//                 <AiOutlineUser />
//               </span>

//               // <Link className="login-logo"
//               //   to="/"
//               //   onClick={handleLogout}
//               // >
//               //   <IoMdLogOut />
//               // </Link>
//             ) : (
//               <Link className="login-logo"
//                 to="/"
//                 onClick={handleLogout}
//               >
//                 <IoMdLogOut />
//               </Link>

//               // <span className="login-logo"
//               //   to="/"
//               //   onClick={LoginBtn}
//               // >
//               //   <AiOutlineUser />
//               // </span>
//             )}

//             <Link className="wishlist-logo"
//               to="/Wishlist"
//               onClick={wishBtn}
//             >
//               <GiSelfLove />
//             </Link>


//             <span className="cart-logo"
//               to="/Cart"
//               // onClick={cartBtn()}
//               onClick={cartBtn}
//             >
//               <BsMinecart />
//               <Badge pill bg="secondary" className="cart-badge">
//                 {/* {cartItems.length} */}
//               </Badge>
//             </span>
//             <Link className="admin-logo"
//               onClick={toAdminLogin}
//               to='/AdminLogin'
//             >
//               <GrUserAdmin />
//             </Link>

//           </div>
//         </div>


//         <div className="thrid-nav">
//           <div className="navbar-thrid-line">
//             {/* <Link className="service-text"
//                 // onClick={brandBtn()}
//                 //  to="/ViewProduct" 
//                 >
//                   Brands
//                   <div className="dropdown-list">
//                     <ul>
//                       <li>
//                         {" "}
//                         <Link className="linkWithoutDecoration" to="/Bata">
//                           Bata
//                         </Link>
//                       </li>
//                       <li>
//                         <Link className="linkWithoutDecoration" to="/Nike">
//                           Nike
//                         </Link>
//                       </li>
//                       <li>
//                         <Link className="linkWithoutDecoration" to="/Reebok">
//                           Reebok
//                         </Link>
//                       </li>
//                       <li>
//                         <Link className="linkWithoutDecoration" to="/HushPuppies">
//                           HushPuppies
//                         </Link>
//                       </li>
//                       <li>
//                         <Link className="linkWithoutDecoration" to="/Puma">
//                           Puma
//                         </Link>
//                       </li>
//                       <li>
//                         <Link className="linkWithoutDecoration" to="/Weinbrenner">
//                           Weinbrenner
//                         </Link>
//                       </li>
//                     </ul>
//                   </div>
//                 </Link> */}

//             {/* <a className="service-text" href="/">
//                   Home Decor
//                   <div className="dropdown-list">
//                     <ul>
//                       <li>Photoframe</li>
//                       <li>Wall Art</li>
//                     </ul>
//                   </div>
//                 </a> */}
//             <a className="service-text" href="/">
//               Electronics
//             </a>
//             <a
//               className="service-text"
//               onMouseEnter={() => handleDropdownToggle('Fashion')} // Trigger on mouse enter
//               onMouseLeave={() => handleDropdownToggle('Fashion')} // Trigger on mouse leave
//             >
//               Fashion
//               {dropdownOpen.Fashion && ( // Conditionally render Fashion dropdown
//                 <div className="dropdown-list">
//                   <ul>
//                     <li>
//                       <a
//                         className="service-text"
//                         onMouseEnter={() => handleDropdownToggle('Mens')} // Trigger on mouse enter
//                         onMouseLeave={() => handleDropdownToggle('Mens')} // Trigger on mouse leave
//                       >
//                         Mens
//                         {dropdownOpen.Mens && ( // Conditionally render Mens sub-dropdown
//                           <div className="dropdown-list">
//                             <ul>
//                               <li>Shirts</li>
//                               <li>Pants</li>
//                               <li>Casual wears</li>
//                             </ul>
//                           </div>
//                         )}
//                       </a>
//                     </li>
//                     <li>
//                       <a
//                         className="service-text"
//                         onMouseEnter={() => handleDropdownToggle('Womens')} // Trigger on mouse enter
//                         onMouseLeave={() => handleDropdownToggle('Womens')} // Trigger on mouse leave
//                       >
//                         Womens
//                         {dropdownOpen.Womens && ( // Conditionally render Womens sub-dropdown
//                           <div className="dropdown-list">
//                             <ul>
//                               <li>Saree</li>
//                               <li>Laptops</li> <li>Mobiles</li> </ul>
//                           </div>
//                         )}
//                       </a>
//                     </li>
//                   </ul>
//                 </div>
//               )}
//             </a>
//             <a className="service-text" value="Shirts" href="/ViewCategories">
//               Home Utility
//             </a>
//             <a className="service-text" value="Shirts" href="/ViewCategories">
//               Laptops
//             </a>
//             <Link className="service-text linkWithoutDecoration" value="Shirts" to="/ViewCategories">
//               Mobiles
//             </Link>
//           </div>
//         </div>
//       </div>
//       {/* </Navbar> */}
//     </div>


//   );
// }

// export default HeaderNavbar;

//header navbar with hamburgermenu

// import React, { useContext, useState } from 'react';
// import { Link, useNavigate, useLocation } from 'react-router-dom';
// import { BsMinecart } from 'react-icons/bs';
// import { GiSelfLove } from 'react-icons/gi';
// import { AiOutlineUser, AiOutlineFilter, AiOutlineMenu } from 'react-icons/ai';
// import { IoMdLogOut } from 'react-icons/io';
// import { GrUserAdmin } from 'react-icons/gr';
// import Badge from 'react-bootstrap/Badge';
// import { MyContext } from './Mycontext';
// import '../src/HeaderNavbar.css';

// function HeaderNavbar() {
//   const { setLoginStatus, setProducts, userToken, searchInput, setSearchInput, originalProducts } = useContext(MyContext);
//   const nav = useNavigate();
//   const location = useLocation();
//   const [filters, setFilters] = useState({
//     category: '',
//     subCategory: '',
//     priceRange: [0, 10000],
//     brand: '',
//     type: '',
//     gender: '',
//   });
//   const [sortOption, setSortOption] = useState('');
//   const [filterVisible, setFilterVisible] = useState(false);
//   const [menuVisible, setMenuVisible] = useState(false);

//   const [isMenuOpen, setIsMenuOpen] = useState(false);

//   const handleLogout = () => {
//     alert('User Logging out');
//     localStorage.clear();
//     setLoginStatus('logout');
//   };

//   function handleSearch(e) {
//     const query = e.target.value;
//     setSearchInput(query);

//     let filteredProducts = applyFilters(originalProducts);

//     if (query.trim() !== "") {
//       filteredProducts = filteredProducts.filter(item => {
//         const { brand = "", name = "", category = "", subCategory = "", type = "", gender = "", attributes = {} } = item;

//         return (
//           brand.toUpperCase().includes(query.toUpperCase()) ||
//           name.toUpperCase().includes(query.toUpperCase()) ||
//           category.toUpperCase().includes(query.toUpperCase()) ||
//           subCategory.toUpperCase().includes(query.toUpperCase()) ||
//           type.toUpperCase().includes(query.toUpperCase()) ||
//           (gender ? gender.toUpperCase().includes(query.toUpperCase()) : false) ||
//           Object.values(attributes).some(attr => attr.toUpperCase().includes(query.toUpperCase()))
//         );
//       });
//     }

//     const sortedProducts = sortProducts(filteredProducts);
//     setProducts(sortedProducts);
//   }

//   function applyFilters(products) {
//     return products.filter(item => {
//       const { brand = "", price = 0, category = "", subCategory = "", type = "", gender = "" } = item;

//       return (
//         (!filters.category || category === filters.category) &&
//         (!filters.subCategory || subCategory === filters.subCategory) &&
//         (price >= filters.priceRange[0] && price <= filters.priceRange[1]) &&
//         (!filters.brand || brand === filters.brand) &&
//         (!filters.type || type === filters.type) &&
//         (!filters.gender || gender === filters.gender)
//       );
//     });
//   }

//   function sortProducts(products) {
//     if (sortOption === 'price-asc') {
//       return [...products].sort((a, b) => a.price - b.price);
//     } else if (sortOption === 'price-desc') {
//       return [...products].sort((a, b) => b.price - a.price);
//     } else if (sortOption === 'name-asc') {
//       return [...products].sort((a, b) => a.name.localeCompare(b.name));
//     } else if (sortOption === 'name-desc') {
//       return [...products].sort((a, b) => b.name.localeCompare(a.name));
//     }
//     return products;
//   }

//   function handleFilterChange(filterType, value) {
//     if (filterType === 'priceRange') {
//       const newRange = [filters.priceRange[0], value];
//       setFilters(prev => ({
//         ...prev,
//         [filterType]: newRange
//       }));
//     } else {
//       setFilters(prev => ({
//         ...prev,
//         [filterType]: value
//       }));
//     }
//   }

//   function handleSortChange(e) {
//     setSortOption(e.target.value);
//   }

//   function resetFilters() {
//     setFilters({
//       category: '',
//       subCategory: '',
//       priceRange: [0, 10000],
//       brand: '',
//       type: '',
//       gender: '',
//     });
//     setSortOption('');
//     setSearchInput('');
//     setProducts(originalProducts);
//   }

//   const toggleFilterVisibility = () => {
//     setFilterVisible(prev => !prev);
//   };

//   const toggleMenuVisibility = () => {
//     setMenuVisible(prev => !prev);
//   };

//    // Toggle menu open/close state
//    const toggleMenu = () => setIsMenuOpen(!isMenuOpen);

//   const isOnLoginOrRegisterPage = location.pathname === '/' || location.pathname === '/UserRegister';
//   const isOnAdminPage = location.pathname === '/AdminPage';

//   return (
//     <div className='Header-Navbar'>
//       <div className='Nav-bar'>
//         <div className='left-section'>
//           <span className='logo' onClick={() => nav('/UserHome')}>
//             The Store
//           </span>
//         </div>

//         <div className='center-section'>
//           <input
//             type='text'
//             className='input-Search'
//             placeholder='Search here...'
//             value={searchInput}
//             onChange={handleSearch}
//           />
//           <AiOutlineFilter className='filter-icon' onClick={toggleFilterVisibility} />
//         </div>

//         <div className='right-section'>
//         <div id="menuToggle">
//         {/* Hidden checkbox to toggle the menu */}
//         <input 
//           type="checkbox" 
//           checked={isMenuOpen} 
//           onChange={toggleMenu} 
//         />
//         {/* Hamburger icon */}
//         <span></span>
//         <span></span>
//         <span></span>
//         {/* Menu items */}
//         <ul id="menu" className={isMenuOpen ? 'open' : ''}>
//           <span onClick={() => nav('/UserHome')}>Home</span>
//           <span onClick={() => nav('/UserHome')}>Home</span>
//           <span onClick={() => nav('/UserHome')}>Home</span>
//           <span onClick={() => nav('/UserHome')}>Home</span>
//           <a href="https://erikterwan.com/" target="_blank" rel="noopener noreferrer"><li>Show me more</li></a>
//         </ul>
//       </div>
//           {/* <AiOutlineMenu className='hamburger-icon' onClick={toggleMenuVisibility} />

//           {menuVisible && (
//             <div className='hamburger-menu'>
//               {!userToken && !isOnLoginOrRegisterPage && (
//                 <span className='login-logo' onClick={() => nav('/')}>
//                   <AiOutlineUser /> Login
//                 </span>
//               )}
//               {userToken && !isOnLoginOrRegisterPage && (
//                 <>
//                   <span className='login-logo' onClick={() => nav('/MyAccount')}>
//                     <AiOutlineUser /> MyProfile
//                   </span>
//                   <span className='login-logo' onClick={handleLogout}>
//                     <IoMdLogOut /> Logout
//                   </span>
//                 </>
//               )}
//               {!isOnLoginOrRegisterPage && !isOnAdminPage && (
//                 <>
//                   <Link className='wishlist-logo' to='/Wishlist'>
//                     <GiSelfLove /> Wishlist
//                   </Link>
//                   <span className='cart-logo' onClick={() => userToken ? nav('/Cart') : alert('Please login to view your cart')}>
//                     <BsMinecart />
//                     <Badge pill bg='secondary' className='cart-badge'></Badge>
//                   </span>
//                 </>
//               )}
//               {isOnAdminPage && (
//                 <Link className='admin-logo' to='/AdminLogin'>
//                   <GrUserAdmin /> Admin Login
//                 </Link>
//               )}
//             </div>
//           )} */}

//           <div className={`filter-section ${filterVisible ? 'active' : ''}`}>
//             <label htmlFor='category'>Category:</label>
//             <select
//               id='category'
//               value={filters.category}
//               onChange={(e) => handleFilterChange('category', e.target.value)}
//             >
//               <option value=''>All</option>
//               <option value='Electronics'>Electronics</option>
//               <option value='Clothing'>Clothing</option>
//               <option value='Footwear'>Footwear</option>
//             </select>

//             <label htmlFor='priceRange'>Price Range:</label>
//             <div className='price-range'>
//               <input
//                 type='range'
//                 id='priceRange'
//                 min='0'
//                 max='10000'
//                 value={filters.priceRange[1]}
//                 onChange={(e) => handleFilterChange('priceRange', e.target.value)}
//               />
//               <div className='price-values'>
//                 <span>${filters.priceRange[0]}</span>
//                 <span>${filters.priceRange[1]}</span>
//               </div>
//             </div>

//             <label htmlFor='brand'>Brand:</label>
//             <input
//               id='brand'
//               type='text'
//               value={filters.brand}
//               onChange={(e) => handleFilterChange('brand', e.target.value)}
//             />

//             <label htmlFor='gender'>Gender:</label>
//             <select
//               id='gender'
//               value={filters.gender}
//               onChange={(e) => handleFilterChange('gender', e.target.value)}
//             >
//               <option value=''>Any</option>
//               <option value='Men'>Men</option>
//               <option value='Women'>Women</option>
//               <option value='Kid'>Kid</option>
//             </select>

//             <label htmlFor='sort'>Sort By:</label>
//             <select
//               id='sort'
//               value={sortOption}
//               onChange={handleSortChange}
//             >
//               <option value=''>None</option>
//               <option value='price-asc'>Price: Low to High</option>
//               <option value='price-desc'>Price: High to Low</option>
//               <option value='name-asc'>Name: A to Z</option>
//               <option value='name-desc'>Name: Z to A</option>
//             </select>

//             <button onClick={resetFilters} className='reset-button'>Reset</button>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// }

// export default HeaderNavbar;
